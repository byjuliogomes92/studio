rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isWorkspaceMember(workspaceId) {
      // Check if a membership document exists for the user in the given workspace.
      // The document ID is a composite key for efficient lookups.
      return isAuthenticated() && 
             workspaceId != null &&
             exists(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId));
    }
    
    function isMember(workspaceId) {
      return isWorkspaceMember(workspaceId);
    }
    
    function isOwner(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isAuthenticated() && 
             workspaceId != null &&
             exists(memberPath) && 
             get(memberPath).data.role == 'owner';
    }
    
    function isEditor(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isAuthenticated() &&
             workspaceId != null &&
             exists(memberPath) && 
             (get(memberPath).data.role == 'owner' || get(memberPath).data.role == 'editor');
    }
    
    function hasWorkspaceAccess(workspaceId) {
      return workspaceId != null && isWorkspaceMember(workspaceId);
    }
    
    function isResourceOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // --- Users ---
    // Users can read and write their own user document.
    match /users/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    // --- User Progress ---
    // Users can read and write their own onboarding progress.
    match /userProgress/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    // --- Workspaces ---
    // You can read a workspace if you're a member.
    // You can only create a workspace for yourself.
    // Only owners can update, and only admins can delete.
    match /workspaces/{workspaceId} {
      allow read: if hasWorkspaceAccess(workspaceId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(workspaceId);
      allow delete: if isAdmin(); // Only admins can delete workspaces
    }
    
    // --- Workspace Members ---
    // You can read memberships of your own workspace or your own membership status.
    // Only owners can create (invite) or update (change role) members.
    // Members can leave (delete their own membership), or owners can remove them.
    match /workspaceMembers/{membershipId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || 
                      hasWorkspaceAccess(resource.data.workspaceId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.workspaceId);
      allow update: if isAuthenticated() && isOwner(resource.data.workspaceId);
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.workspaceId) || 
                        request.auth.uid == resource.data.userId);
    }
    
    // --- Projects, Brands, Page Drafts, Media, User Templates ---
    // Generic rules for resources that belong to a workspace.
    function isWorkspaceResource(workspaceId) {
       return hasWorkspaceAccess(workspaceId);
    }
    function canEditWorkspaceResource(workspaceId) {
        return isEditor(workspaceId);
    }
    
    match /{collection}/{docId} 
    where collection in ['projects', 'brands', 'pages_drafts', 'templates', 'media'] {
        allow read: if isWorkspaceResource(resource.data.workspaceId);
        allow create: if canEditWorkspaceResource(request.resource.data.workspaceId);
        allow update, delete: if canEditWorkspaceResource(resource.data.workspaceId);
    }
    
    // --- Published Pages ---
    // Published pages can be read by anyone (public).
    // Only editors can create, update, or delete them.
    match /pages_published/{pageId} {
      allow read: if true; 
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }
    
    // --- Page Access Credentials ---
    // Nobody can read credentials from the client-side.
    // Editors can create/delete credentials for pages in their workspace.
    match /pageAccess/{accessId} {
      allow read: if isEditor(resource.data.workspaceId); // Allow read for editors to check existing users
      allow create, delete: if isEditor(request.resource.data.workspaceId);
      allow update: if isEditor(resource.data.workspaceId);
    }
    
    // --- Default Templates (Admin-only) ---
    // Authenticated users can read them to create pages.
    // Only admins can write (create, update, delete).
    match /defaultTemplates/{templateId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
     // --- Community Assets ---
    // Authenticated users can read.
    // Author or Admin can update/delete.
    match /communityAssets/{assetId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated(); // Anyone can share
        allow update, delete: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    // --- Activity Logs ---
    // Members can read logs for their workspace.
    // Any authenticated user can create a log entry (e.g., when they join a workspace).
    // Logs are immutable.
    match /activityLogs/{logId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create: if isAuthenticated();
      allow update, delete: if false; 
    }
    
    // --- Analytics: Views and Submissions ---
    // Anyone can create (submit form, view page).
    // Only workspace members can read/list them.
    // They are immutable.
    match /pageViews/{viewId} {
      allow create: if true; 
      allow read, list: if hasWorkspaceAccess(resource.data.workspaceId);
      allow update, delete: if false; 
    }
    
    match /formSubmissions/{submissionId} {
      allow create: if true; 
      allow read, list: if hasWorkspaceAccess(resource.data.workspaceId);
      allow update, delete: if false;
    }
    
    // --- Notifications (Admin to User) ---
    // Only the target user can read/update their notification.
    // Only admins can create/delete notifications.
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create, delete: if isAdmin();
    }
    
    // --- Platform Settings (Admin-only) ---
    // Any authenticated user can read (e.g., for the dashboard banner).
    // Only admins can write.
    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Support Tickets ---
    // A user can create their own ticket.
    // Only the user who created it or an admin can read/update it.
    // Only admins can list all tickets or delete them.
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow list, delete: if isAdmin();
    }
    
    // --- Ticket Comments ---
    // Anyone authenticated can create a comment.
    // Only the ticket owner or an admin can read the comments for that ticket.
    // Comments are immutable.
    match /ticketComments/{commentId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
                     (exists(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)) &&
                      (get(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)).data.userId == request.auth.uid ||
                       isAdmin()));
      allow update, delete: if false;
    }
  }
}
