rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // == FUNÇÕES AUXILIARES DE PERMISSÃO
    // =====================================================================
    // Estas funções são usadas para simplificar e reutilizar a lógica de
    // verificação de permissões nas regras abaixo.

    // Verifica se o usuário está logado na plataforma.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Verifica se o usuário tem a permissão de Administrador.
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Verifica se o usuário é um membro (de qualquer tipo) do workspace especificado.
    function isWorkspaceMember(workspaceId) {
      return isAuthenticated() &&
             workspaceId != null &&
             exists(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId));
    }
    
    // Verifica se o usuário é o Dono (Owner) de um workspace.
    function isOwner(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isWorkspaceMember(workspaceId) && get(memberPath).data.role == 'owner';
    }
    
    // Verifica se o usuário é um Editor ou Dono de um workspace.
    function isEditor(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isWorkspaceMember(workspaceId) && 
             (get(memberPath).data.role == 'owner' || get(memberPath).data.role == 'editor');
    }

    // Verifica se o usuário é o dono do recurso específico (ex: seu próprio perfil).
    function isResourceOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // =====================================================================
    // == REGRAS POR COLEÇÃO
    // =====================================================================

    // --- Usuários (`users`) ---
    // Cada usuário pode ler e escrever apenas em seu próprio documento de usuário.
    match /users/{userId} {
      allow read, write: if isResourceOwner(userId);
    }

    // --- Progresso de Onboarding (`userProgress`) ---
    // Cada usuário pode ler e escrever apenas em seu próprio progresso de onboarding.
    match /userProgress/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    // --- Workspaces ---
    // Locais de trabalho que agrupam projetos, páginas e membros.
    match /workspaces/{workspaceId} {
      allow read: if isWorkspaceMember(workspaceId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(workspaceId);
      allow delete: if isAdmin(); // Apenas Admins podem deletar workspaces por segurança.
    }
    
    // --- Membros do Workspace (`workspaceMembers`) ---
    // Define a relação entre um usuário e um workspace.
    match /workspaceMembers/{membershipId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || 
                      isWorkspaceMember(resource.data.workspaceId));
      allow create, update: if isOwner(request.resource.data.workspaceId);
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.workspaceId) || 
                        isResourceOwner(resource.data.userId)); // Dono pode remover ou o próprio usuário pode sair.
    }

    // --- Projetos (`projects`) ---
    // Pastas para organizar as páginas.
    match /projects/{projectId} {
      allow read, create: if isWorkspaceMember(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }

    // --- Marcas (`brands`) ---
    // Kits de marca com logos, cores e fontes.
    match /brands/{brandId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create, update, delete: if isEditor(request.resource.data.workspaceId);
    }

    // --- Páginas (Rascunhos - `pages_drafts`) ---
    // Versão de edição das páginas.
    match /pages_drafts/{pageId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create, update, delete: if isEditor(request.resource.data.workspaceId);
    }

    // --- Páginas (Publicadas - `pages_published`) ---
    // Versão pública e otimizada das páginas.
    match /pages_published/{pageId} {
      allow read: if true; // Qualquer pessoa pode ler páginas publicadas.
      allow create, update: if isEditor(request.resource.data.workspaceId);
      allow delete: if isEditor(resource.data.workspaceId);
    }
    
    // --- Controle de Acesso à Página (`pageAccess`) ---
    // Armazena credenciais para páginas protegidas por senha.
    match /pageAccess/{accessId} {
      allow read: if false; // Ninguém pode ler as credenciais do lado do cliente.
      allow write, delete: if isEditor(request.resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
    }

    // --- Templates Padrão (`defaultTemplates`) ---
    // Templates disponíveis para todos os usuários.
    match /defaultTemplates/{templateId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin(); // Apenas Admins gerenciam templates padrão.
    }

    // --- Templates do Usuário (`templates`) ---
    // Templates criados pelos próprios usuários.
    match /templates/{templateId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isWorkspaceMember(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }
    
    // --- Mídia (`media`) ---
    // Arquivos da biblioteca de mídia.
    match /media/{mediaId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create, update, delete: if isEditor(request.resource.data.workspaceId);
    }
    
    // --- Logs de Atividade (`activityLogs`) ---
    // Registros imutáveis de ações importantes no workspace.
    match /activityLogs/{logId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isAuthenticated(); // Qualquer usuário logado pode gerar um log.
      allow update, delete: if false; // Logs são imutáveis.
    }
    
    // --- Convites (`invitations`) ---
    // Sistema de convites para workspaces.
    match /invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.workspaceId);
      allow update, delete: if isAuthenticated();
    }
    
    // --- Analytics (Visualizações e Submissões) ---
    match /pageViews/{viewId} {
      allow create: if true; // Qualquer pessoa pode gerar uma visualização de página.
      allow read, list: if hasWorkspaceAccess(resource.data.workspaceId);
      allow update, delete: if false; // Imutável.
    }
    
    match /formSubmissions/{submissionId} {
      allow create: if true; // Qualquer pessoa pode enviar um formulário.
      allow read, list: if isWorkspaceMember(resource.data.workspaceId);
      allow update, delete: if false; // Imutável.
    }
    
    // --- Notificações (`notifications`) ---
    // Notificações enviadas por Admins para os usuários.
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // --- Configurações da Plataforma (`platformSettings`) ---
    // Configurações globais, como o banner do dashboard.
    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Chamados de Suporte (`supportTickets`) ---
    match /supportTickets/{ticketId} {
      allow create: if isResourceOwner(request.resource.data.userId);
      allow read, update: if isAdmin() || isResourceOwner(resource.data.userId);
      allow list, delete: if isAdmin();
    }
    
    // --- Comentários de Suporte (`ticketComments`) ---
    match /ticketComments/{commentId} {
      allow create: if isAuthenticated();
      allow read: if exists(/databases/$(database)/documents/supportTickets/$(request.resource.data.ticketId)) &&
                     (isAdmin() || get(/databases/$(database)/documents/supportTickets/$(request.resource.data.ticketId)).data.userId == request.auth.uid);
      allow update, delete: if false; // Imutável.
    }
  }
}
