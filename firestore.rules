rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    //       Funções Auxiliares
    // =================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isWorkspaceMember(workspaceId) {
      return isAuthenticated() &&
             workspaceId != null &&
             exists(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId));
    }
    
    function isOwner(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isAuthenticated() &&
             workspaceId != null &&
             exists(memberPath) && 
             get(memberPath).data.role == 'owner';
    }
    
    function isEditor(workspaceId) {
      let memberPath = /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId);
      return isAuthenticated() && 
             workspaceId != null &&
             exists(memberPath) && 
             (get(memberPath).data.role == 'owner' || get(memberPath).data.role == 'editor');
    }
    
    function hasWorkspaceAccess(workspaceId) {
      return isAuthenticated() && workspaceId != null && isWorkspaceMember(workspaceId);
    }
    
    function isResourceOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // =================================
    //      Regras das Coleções
    // =================================

    match /users/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    match /userProgress/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    match /workspaces/{workspaceId} {
      allow read: if hasWorkspaceAccess(workspaceId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(workspaceId);
      allow delete: if isAdmin();
    }
    
    match /workspaceMembers/{membershipId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || hasWorkspaceAccess(resource.data.workspaceId));
      allow create: if isOwner(request.resource.data.workspaceId);
      allow update: if isOwner(resource.data.workspaceId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.workspaceId) || request.auth.uid == resource.data.userId);
    }
    
    match /projects/{projectId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create: if hasWorkspaceAccess(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }
    
    match /brands/{brandId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create, update, delete: if isEditor(resource.data.workspaceId);
    }
    
    match /pages_drafts/{pageId} {
      allow read, delete: if isEditor(resource.data.workspaceId);
      allow create, update: if request.resource.data.workspaceId == get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + request.resource.data.workspaceId)).data.workspaceId;
    }
    
    match /pages_published/{pageId} {
      allow read: if true; 
      allow create, update, delete: if request.resource.data.workspaceId == get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + request.resource.data.workspaceId)).data.workspaceId;
    }
    
    match /pageAccess/{accessId} {
      // Ninguém pode ler ou listar do cliente. Apenas a Cloud Function com Admin SDK.
      allow read, list: if false; 
      // Apenas editores podem criar, atualizar ou deletar credenciais
      allow write: if isEditor(request.resource.data.workspaceId);
    }
    
    match /defaultTemplates/{templateId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /templates/{templateId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }
    
    match /media/{mediaId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create, update, delete: if isEditor(request.resource.data.workspaceId);
    }

    match /communityAssets/{assetId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.authorId;
        allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.authorId || isAdmin());
    }
    
    match /activityLogs/{logId} {
      allow read: if hasWorkspaceAccess(resource.data.workspaceId);
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /pageViews/{viewId} {
      allow create: if true; 
      allow read, list: if hasWorkspaceAccess(resource.data.workspaceId);
      allow update, delete: if false;
    }
    
    match /formSubmissions/{submissionId} {
      allow create: if true;
      allow read, list: if exists(/databases/$(database)/documents/pages_published/$(resource.data.pageId)) &&
                           hasWorkspaceAccess(get(/databases/$(database)/documents/pages_published/$(resource.data.pageId)).data.workspaceId);
      allow update, delete: if false;
    }
    
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create, delete: if isAdmin();
    }
    
    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
    
    match /ticketComments/{commentId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
                     (exists(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)) &&
                      (get(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)).data.userId == request.auth.uid || isAdmin()));
      allow update, delete: if false;
    }

    match /pageComments/{commentId} {
      allow read, create: if hasWorkspaceAccess(request.resource.data.workspaceId);
      allow update: if hasWorkspaceAccess(resource.data.workspaceId);
      allow delete: if isEditor(resource.data.workspaceId) || isResourceOwner(resource.data.userId);
    }
  }
}
