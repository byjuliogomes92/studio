rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Checks if a user is a member of a given workspace by querying the workspaceMembers collection.
    function isWorkspaceMember(workspaceId) {
        return isAuthenticated() && exists( /databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId) );
    }

    function getWorkspaceRole(workspaceId) {
        return get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId)).data.role;
    }

    function isOwner(workspaceId) {
        return isWorkspaceMember(workspaceId) && getWorkspaceRole(workspaceId) == 'owner';
    }

    function isEditor(workspaceId) {
        let role = getWorkspaceRole(workspaceId);
        return isWorkspaceMember(workspaceId) && (role == 'owner' || role == 'editor');
    }
    
    function isResourceOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // --- Collections Rules ---

    match /users/{userId} {
      // Any authenticated user can read public profile info (for mentions, etc.)
      allow read: if isAuthenticated();
      // Only the user themselves can update their own profile.
      allow write: if isResourceOwner(userId);
    }
    
    match /userProgress/{userId} {
      allow read, write: if isResourceOwner(userId);
    }
    
    match /workspaces/{workspaceId} {
      allow read: if isWorkspaceMember(workspaceId);
      allow create: if isResourceOwner(request.resource.data.ownerId);
      allow update: if isOwner(workspaceId);
      allow delete: if isAdmin();
    }
    
    match /workspaceMembers/{membershipId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isOwner(request.resource.data.workspaceId);
      allow update: if isOwner(resource.data.workspaceId);
      allow delete: if isOwner(resource.data.workspaceId) || isResourceOwner(resource.data.userId);
    }
    
    match /projects/{projectId} {
      // Must verify membership BEFORE trying to access resource.data
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isWorkspaceMember(request.resource.data.workspaceId);
      allow update, delete: if isEditor(get(path).data.workspaceId);
    }
    
    match /brands/{brandId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(get(path).data.workspaceId);
    }

    match /media/{mediaId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(get(path).data.workspaceId);
    }
    
    match /pages_drafts/{pageId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(get(path).data.workspaceId);
    }
    
    match /pages_published/{pageId} {
      allow read: if true; // Publicly accessible
      allow write: if isEditor(get(path).data.workspaceId); // Includes create, update, delete
    }
    
    match /templates/{templateId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(get(path).data.workspaceId);
    }
    
    match /defaultTemplates/{templateId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /activityLogs/{logId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isAuthenticated(); // Logged in users can create logs for their actions
      allow update, delete: if false; // Immutable
    }
    
    match /pageViews/{viewId} {
      allow create: if true;
      allow read, list: if isWorkspaceMember(get(path).data.workspaceId);
      allow update, delete: if false;
    }
    
    match /formSubmissions/{submissionId} {
      allow create: if true;
      allow read, list: if isWorkspaceMember(get(/databases/$(database)/documents/pages_drafts/$(resource.data.pageId)).data.workspaceId);
      allow update, delete: if false;
    }

    match /notifications/{notificationId} {
      allow read, update: if isResourceOwner(resource.data.userId);
      allow create, delete: if isAdmin();
    }

    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /supportTickets/{ticketId} {
      allow create: if isResourceOwner(request.resource.data.userId);
      allow read, update: if isResourceOwner(get(path).data.userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /ticketComments/{commentId} {
      allow create: if isAuthenticated(); // Checked inside the function that it belongs to the user or ticket
      allow read: if isAdmin() || 
                     isResourceOwner(get(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)).data.userId);
      allow update, delete: if false;
    }

    match /pageComments/{commentId} {
      allow read: if isWorkspaceMember(get(path).data.workspaceId);
      allow create: if isWorkspaceMember(request.resource.data.workspaceId) && isResourceOwner(request.resource.data.userId);
      // Editors can resolve/update any comment, users can update their own
      allow update: if isEditor(get(path).data.workspaceId) || isResourceOwner(request.resource.data.userId);
      // Editors can delete any comment, users can delete their own
      allow delete: if isEditor(get(path).data.workspaceId) || isResourceOwner(resource.data.userId);
    }
    
    match /communityAssets/{assetId} {
      allow read: if isAuthenticated();
      // Only allow creation/update/deletion in the future, maybe through a trusted function or admin panel.
      allow write: if false; 
    }
    
    // Lock down backups collection
    match /backups/{backupId} {
        allow read, write: if false;
    }
  }
}