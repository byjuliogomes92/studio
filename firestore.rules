
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /projects/{projectId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    match /brands/{brandId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    match /pages_drafts/{pageId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    match /pages_published/{pageId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId);
      // Delete is handled by the main deletePage function which checks ownership on the draft.
      allow delete: if request.auth != null; 
    }

    match /templates/{templateId} {
      allow read: if resource.data.isDefault == true || isOwner(resource.data.createdBy);
      allow create: if isOwner(request.resource.data.createdBy);
      allow update, delete: if isOwner(resource.data.createdBy);
    }

    match /userProgress/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /pageViews/{viewId} {
      // Allows anyone to create a page view (triggered by the public API route).
      allow create: if true;
      // Allows anyone to read page views.
      allow read: if true;
    }

    match /formSubmissions/{submissionId} {
      // Allows anyone to create a form submission (triggered by the public API route).
      allow create: if true;
      // Allows anyone to read form submissions.
      allow read: if true;
    }
  }
}

    