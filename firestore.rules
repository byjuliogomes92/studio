
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Function to check if a user is part of a workspace
    function isWorkspaceMember(workspaceId, userId) {
      return exists(/databases/$(database)/documents/workspaceMembers/$(userId)_$(workspaceId));
    }
    
    function isInvitedUser(email) {
      return exists(/databases/$(database)/documents/invites);
    }
    
    // Workspaces
    match /workspaces/{workspaceId} {
      allow read: if isWorkspaceMember(workspaceId, request.auth.uid);
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.ownerId || get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(workspaceId)).data.role == 'admin';
      allow delete: if request.auth.uid == resource.data.ownerId;
    }

    // Workspace Members
    match /workspaceMembers/{membershipId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId, request.auth.uid);
      // Only owners/admins can add/remove/update roles
      allow write: if isWorkspaceMember(request.resource.data.workspaceId, request.auth.uid) &&
                    (get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(request.resource.data.workspaceId)).data.role in ['owner', 'admin']);
    }

    // Generic rule for workspace-bound data
    match /{collection}/{docId} 
      where collection in ['projects', 'pages_drafts', 'pages_published', 'templates', 'brands', 'media', 'activityLogs'] {
      
      allow read: if isWorkspaceMember(resource.data.workspaceId, request.auth.uid);
      allow create: if isWorkspaceMember(request.resource.data.workspaceId, request.auth.uid);
      allow update: if isWorkspaceMember(resource.data.workspaceId, request.auth.uid);
      allow delete: if isWorkspaceMember(resource.data.workspaceId, request.auth.uid);
    }

    // User-specific data
    match /userProgress/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Publicly creatable, privately readable data
    match /{collection}/{docId} where collection in ['pageViews', 'formSubmissions'] {
      allow create: if true; // Anyone can submit a form or trigger a page view
      allow read: if isWorkspaceMember(resource.data.workspaceId, request.auth.uid);
      allow update, delete: if false; // Protect data integrity
    }
  }
}
