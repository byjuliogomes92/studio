rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the owner of a resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for projects collection
    match /projects/{projectId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    // Rules for brands collection
    match /brands/{brandId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Rules for draft pages
    match /pages_drafts/{pageId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }
    
    // Rules for published pages
    match /pages_published/{pageId} {
      allow read: if true;
      allow write: if isOwner(request.resource.data.userId);
    }

    // Rules for templates
    match /templates/{templateId} {
      allow read: if resource.data.isDefault == true || isOwner(resource.data.createdBy);
      allow create: if isOwner(request.resource.data.createdBy);
      allow update, delete: if isOwner(resource.data.createdBy);
    }

    // Rules for user progress
    match /userProgress/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Rules for page analytics (views)
    match /pageViews/{viewId} {
      allow create: if true; // Allow public creation for tracking
      allow read: if true;   // Allow public read
    }

    // Rules for form analytics (submissions)
    match /formSubmissions/{submissionId} {
      allow create: if true; // Allow public creation from forms
      allow read: if true;   // Allow public read
    }
  }
}
