rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSameUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper to get a user's membership document for a given workspace.
    // Note: This relies on a naming convention for membership IDs: '{userId}_{workspaceId}'
    function getMembership(workspaceId) {
      return get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId));
    }
    
    // Checks if a user is a member of any role in a specific workspace.
    function isWorkspaceMember(workspaceId) {
      return isAuthenticated() && workspaceId != null && exists(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId));
    }

    // Checks if the user is the owner of the workspace.
    function isOwner(workspaceId) {
      return isWorkspaceMember(workspaceId) && getMembership(workspaceId).data.role == 'owner';
    }

    // Checks if the user is an owner or editor of the workspace.
    function isEditor(workspaceId) {
      let memberRole = getMembership(workspaceId).data.role;
      return isWorkspaceMember(workspaceId) && (memberRole == 'owner' || memberRole == 'editor');
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // --- Collections Rules ---

    // Users can read public profiles, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isSameUser(userId);
    }
    
    // User-specific progress tracking.
    match /userProgress/{userId} {
      allow read, write: if isSameUser(userId);
    }

    // Workspaces can be read by members, but only updated by owners.
    match /workspaces/{workspaceId} {
      allow read: if isWorkspaceMember(workspaceId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(workspaceId);
      allow delete: if false; // Deleting workspaces is a sensitive operation, restricted.
    }

    // Membership management rules.
    match /workspaceMembers/{membershipId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isOwner(request.resource.data.workspaceId);
      allow update: if isOwner(resource.data.workspaceId); // Role changes
      allow delete: if isOwner(resource.data.workspaceId) || isSameUser(resource.data.userId); // Owners can remove others, users can leave.
    }

    // Projects can be managed by editors and owners.
    match /projects/{projectId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }

    // Brands can be managed by editors and owners.
    match /brands/{brandId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }

    // Drafts are where users edit pages.
    match /pages_drafts/{pageId} {
      allow read, write: if isEditor(resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
    }

    // Published pages are public, but only editors can publish/unpublish (update).
    match /pages_published/{pageId} {
      allow read: if true; 
      allow write: if isEditor(resource.data.workspaceId);
    }
    
    // Community-shared assets
    match /communityAssets/{assetId} {
        allow read: if isAuthenticated();
        // Write access should be handled by a backend function for moderation
        allow write: if false; 
    }

    // Default templates are read-only for users, managed by admins.
    match /defaultTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User-created templates.
    match /templates/{templateId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isEditor(request.resource.data.workspaceId);
      allow update, delete: if isEditor(resource.data.workspaceId);
    }
    
    // Media assets are managed by editors.
    match /media/{mediaId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create, update, delete: if isEditor(resource.data.workspaceId);
    }
    
    // Activity logs are immutable.
    match /activityLogs/{logId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Analytics data can be created publicly, but only read by workspace members.
    match /pageViews/{viewId} {
      allow create: if true;
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow write: if false;
    }
    
    match /formSubmissions/{submissionId} {
      allow create: if true;
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow write: if false;
    }
    
    // Comments on a page can be managed by workspace members.
    match /pageComments/{commentId} {
        allow read: if isWorkspaceMember(resource.data.workspaceId);
        allow create: if isEditor(request.resource.data.workspaceId) && isSameUser(request.resource.data.userId);
        allow update: if isEditor(resource.data.workspaceId) || isSameUser(resource.data.userId); // For resolving or editing own comment
        allow delete: if isEditor(resource.data.workspaceId) || isSameUser(resource.data.userId);
    }
    
    // Admin-only collections
    match /notifications/{notificationId} {
        allow read, write: if isAdmin();
    }

    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Support tickets can be created by any user, but only read by the user or an admin.
    match /supportTickets/{ticketId} {
      allow create: if isSameUser(request.resource.data.userId);
      allow read, update: if isSameUser(resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Comments on tickets follow the ticket's permissions.
    match /ticketComments/{commentId} {
      allow create: if isAuthenticated();
      allow read: if isSameUser(get(/databases/$(database)/documents/supportTickets/$(resource.data.ticketId)).data.userId) || isAdmin();
      allow write: if false;
    }

    // Backups should not be client-accessible.
    match /backups/{backupId} {
      allow read, write: if false;
    }
  }
}
