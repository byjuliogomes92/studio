
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isMember(workspaceId) {
      return exists(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(workspaceId));
    }
    
    match /workspaces/{workspaceId} {
      allow read: if isMember(workspaceId);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isMember(workspaceId) && get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(workspaceId)).data.role in ['owner', 'admin'];
    }

    match /workspaceMembers/{membershipId} {
        allow read: if request.auth.uid == resource.data.userId;
        // Allow owners/admins of a workspace to create new memberships (invite)
        allow create: if isMember(request.resource.data.workspaceId) && get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(request.resource.data.workspaceId)).data.role in ['owner', 'admin'];
        // Allow owners/admins to delete members, but a user can also delete their own membership
        allow delete: if (isMember(resource.data.workspaceId) && get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid)_$(resource.data.workspaceId)).data.role in ['owner', 'admin']) || request.auth.uid == resource.data.userId;
    }

    match /projects/{projectId} {
      allow list, read: if isMember(resource.data.workspaceId);
      allow create, update, delete: if isMember(request.resource.data.workspaceId);
    }
    
    match /brands/{brandId} {
        allow list, read: if isMember(resource.data.workspaceId);
        allow create, update, delete: if isMember(request.resource.data.workspaceId);
    }

    match /pages_drafts/{pageId} {
      allow read, write: if isMember(request.resource.data.workspaceId);
    }

    match /pages_published/{pageId} {
      allow read: if true;
      allow write: if isMember(request.resource.data.workspaceId);
    }

    match /templates/{templateId} {
      // Default templates are public to read. Custom templates are private.
      allow read: if resource.data.isDefault == true || isMember(resource.data.workspaceId);
      // Anyone can create a template for their own workspace
      allow create: if isMember(request.resource.data.workspaceId);
      // Only the owner of a template can modify it
      allow update, delete: if isMember(resource.data.workspaceId) && request.auth.uid == resource.data.createdBy;
    }

    match /userProgress/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /pageViews/{viewId} {
      allow create: if true;
      allow read: if true;
    }

    match /formSubmissions/{submissionId} {
      allow create: if true;
      allow read: if true;
    }
  }
}
