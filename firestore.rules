
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isWorkspaceMember(workspaceId) {
      // Check if a user is a member of a given workspace.
      return get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId)).data.role in ['owner', 'admin', 'editor', 'viewer'];
    }

    function isWorkspaceEditor(workspaceId) {
       // Check if a user has at least editor-level permissions in a workspace.
      return get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId)).data.role in ['owner', 'admin', 'editor'];
    }

    function isWorkspaceAdmin(workspaceId) {
       // Check if a user has at least admin-level permissions in a workspace.
      return get(/databases/$(database)/documents/workspaceMembers/$(request.auth.uid + '_' + workspaceId)).data.role in ['owner', 'admin'];
    }

    // Workspaces
    match /workspaces/{workspaceId} {
      allow read: if isWorkspaceMember(workspaceId);
      allow update: if isWorkspaceAdmin(workspaceId);
      // allow delete: if isOwner... (future)
    }

    match /workspaceMembers/{memberId} {
        allow read: if isWorkspaceMember(resource.data.workspaceId);
        // allow create, delete: if isWorkspaceAdmin(resource.data.workspaceId) (future: for inviting users)
    }

    // Brands
    match /brands/{brandId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isWorkspaceEditor(request.resource.data.workspaceId);
      allow update, delete: if isWorkspaceEditor(resource.data.workspaceId);
    }

    // Projects
    match /projects/{projectId} {
      allow read: if isWorkspaceMember(resource.data.workspaceId);
      allow create: if isWorkspaceEditor(request.resource.data.workspaceId);
      allow update, delete: if isWorkspaceEditor(resource.data.workspaceId);
    }

    // Pages
    match /pages_drafts/{pageId} {
        allow create, update, delete: if isWorkspaceEditor(request.resource.data.workspaceId);
        allow read: if isWorkspaceEditor(resource.data.workspaceId);
    }

    match /pages_published/{pageId} {
        allow read: if true;
        allow update: if isWorkspaceEditor(request.resource.data.workspaceId); // For publishing
    }

    // Templates
    match /templates/{templateId} {
      allow read: if resource.data.isDefault == true || isWorkspaceMember(resource.data.workspaceId);
      allow create: if isWorkspaceEditor(request.resource.data.workspaceId);
      allow update, delete: if isWorkspaceEditor(resource.data.workspaceId);
    }

    // User Progress
    match /userProgress/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Analytics
    match /pageViews/{viewId} {
      // Allows anyone to create a page view (triggered by the public API route).
      allow create: if true;
      // Allows anyone to read page views.
      allow read: if true;
    }

    match /formSubmissions/{submissionId} {
      // Allows anyone to create a form submission (triggered by the public API route).
      allow create: if true;
      // Allows anyone to read form submissions.
      allow read: if true;
    }
  }
}
