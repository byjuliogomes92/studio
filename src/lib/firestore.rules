
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isMember(workspaceId, userId) {
      return exists(/databases/$(database)/documents/workspaceMembers/$(userId)_$(workspaceId));
    }
    
    function isOwner(workspaceId, userId) {
      return get(/databases/$(database)/documents/workspaceMembers/$(userId)_$(workspaceId)).data.role == 'owner';
    }

    match /workspaces/{workspaceId} {
      allow read: if isMember(workspaceId, request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner(workspaceId, request.auth.uid);
    }
    
    match /workspaceMembers/{memberId} {
      allow read, create, delete: if isOwner(resource.data.workspaceId, request.auth.uid);
    }

    match /projects/{projectId} {
      allow list: if request.auth.uid != null; // Simplified for migration
      allow read, update, delete: if (resource.data.keys().hasAll(['workspaceId']) && isMember(resource.data.workspaceId, request.auth.uid)) || (resource.data.keys().hasAll(['userId']) && resource.data.userId == request.auth.uid);
      allow create: if isMember(request.resource.data.workspaceId, request.auth.uid);
    }

    match /brands/{brandId} {
      allow list: if request.auth.uid != null; // Simplified for migration
      allow read, update, delete: if (resource.data.keys().hasAll(['workspaceId']) && isMember(resource.data.workspaceId, request.auth.uid)) || (resource.data.keys().hasAll(['userId']) && resource.data.userId == request.auth.uid);
      allow create: if isMember(request.resource.data.workspaceId, request.auth.uid);
    }

    match /templates/{templateId} {
      allow list: if request.auth.uid != null; // Simplified for migration
      allow read, update, delete: if (resource.data.isDefault == true) || (resource.data.keys().hasAll(['workspaceId']) && isMember(resource.data.workspaceId, request.auth.uid)) || (resource.data.keys().hasAll(['userId']) && resource.data.userId == request.auth.uid);
      allow create: if isMember(request.resource.data.workspaceId, request.auth.uid);
    }

    match /pages_drafts/{pageId} {
      allow list: if request.auth.uid != null; // Simplified for migration
      allow read, write: if (resource.data.keys().hasAll(['workspaceId']) && isMember(resource.data.workspaceId, request.auth.uid)) || (resource.data.keys().hasAll(['userId']) && resource.data.userId == request.auth.uid);
      allow create: if isMember(request.resource.data.workspaceId, request.auth.uid);
    }
    
    match /pages_published/{pageId} {
      allow read: if true;
      allow write: if (resource.data.keys().hasAll(['workspaceId']) && isMember(resource.data.workspaceId, request.auth.uid)) || (resource.data.keys().hasAll(['userId']) && resource.data.userId == request.auth.uid);
      allow create: if isMember(request.resource.data.workspaceId, request.auth.uid);
    }
    
    match /userProgress/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /pageViews/{viewId} {
      allow create: if true;
      allow read: if request.auth != null && isMember(get(/databases/$(database)/documents/pages_published/$(resource.data.pageId)).data.workspaceId, request.auth.uid);
    }

    match /formSubmissions/{submissionId} {
      allow create: if true;
      allow read: if request.auth != null && isMember(get(/databases/$(database)/documents/pages_published/$(resource.data.pageId)).data.workspaceId, request.auth.uid);
    }
  }
}
